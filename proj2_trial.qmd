---
title: "Project 2 test file"
author: "Lamia Benyamine"
format: html
editor: visual
---

```{r}
#libraries needed

library(jsonlite)
library(dplyr)
library(httr)
library(tidyverse)
library(lubridate)
```

API function w endpoints


```{r}
#https://api.energidataservice.dk/dataset/DeclarationProduction?
#https://api.energidataservice.dk/dataset/StorageUtilization?limit=5
#https://api.energidataservice.dk/dataset/Forecasts_Hour?limit=5
energiAPI("Forecasts_Hour",startD = "2024-06-01", priceArea = "DK1")
```

```{r}
#Forecasts_Hour

forecastPower <- function(startDate, forecastType = "all"){
  baseURL <- "https://api.energidataservice.dk/dataset/"
  if(forecastType == "all") {
    ep1 <- "Forecasts_Hour?columns=TimestampUTC,PriceArea,ForecastType,ForecastCurrent&start="
    urlID <- paste(baseURL, ep1, startDate, sep = "")
  }
  else {
    ep1 <- "Forecasts_Hour?columns=HourUTC,PriceArea,ForecastType,ForecastCurrent&start="
    ep2 <- "&filter={\"ForecastType\":[\""
    ep3 <- "\"]}"
    urlID <- paste(baseURL, ep1, startDate, ep2, forecastType, ep3, sep = "")
  }
  
  parsed <- fromJSON(urlID)
  data_tb <- as_tibble(parsed$records) |>
    mutate(TimestampUTC = as_date(ymd_hms(TimestampUTC)), hour = hour(ymd_hms(TimestampUTC))) |>
    select(TimestampUTC, hour, everything())|>
    group_by(TimestampUTC, hour, PriceArea)
  return(data_tb)
}
forecastPower("2024-06-24", "all")

#DeclarationProduction
productionPower <- function(sortDes, productionType, num){
  baseURL <- "https://api.energidataservice.dk/dataset/"
  
  if(productionType == "all") {
    ep1 <- "DeclarationProduction?start=2024-01-01&columns=HourUTC,PriceArea,ProductionType,DeliveryType,CO2PerkWh,SO2PerkWh,NOxPerkWh&sort="
    ep2 <- "%20desc&limit="
    urlID <- paste(baseURL, ep1, sortDes, ep2, num, sep = "")
  }
  else {
    ep1 <- "DeclarationProduction?start=2024-01-01&columns=HourUTC,PriceArea,ProductionType,DeliveryType,CO2PerkWh,SO2PerkWh,NOxPerkWh&filter={\"ProductionType\":[\""
    ep2 <- "\"]}&sort="
    ep3 <- "%20desc&limit="
    urlID <- paste(baseURL, ep1, productionType, ep2, sortDes, ep3, num, sep = "")
  }
  
  parsed <- fromJSON(urlID)
  data_tb <- as_tibble(parsed$records) |>
    mutate(dateUTC = as_date(ymd_hms(HourUTC)), hour = hour(ymd_hms(HourUTC))) |>
      select(dateUTC, hour, 2:6)|>
      group_by(dateUTC, hour, PriceArea)
  return(data_tb)
}
productionPower(sortDes = "CO2PerkWh", productionType = "all", num = 100)


#StorageUtilization
storageUsage <- function(startDate, num){
  baseURL <- "https://api.energidataservice.dk/dataset/"
  ep1 <- "StorageUtilization?sort=GasDay&start="
  ep2 <- "&limit="
  
  urlID <- paste(baseURL, ep1, startDate, ep2, num, sep = "")
  
  parsed <- fromJSON(urlID)
  data_tb <- as_tibble(parsed$records) |>
    mutate(GasDay = as_date(ymd_hms(GasDay))) |>
    select(GasDay, contains("Total"))
  return(data_tb)
}
storageUsage(startDate = "2024-05-01", num = 50)
```

API wrapper function
```{r}
energiAPI <- function(data,...){
  if(data == "forecastPower"){
    output <- forecastPower(...)
  }
  else if(data == "productionPower"){
    output <- productionPower(...)
  }
  else if(data == "storageUsage"){
    output <- storageUsage(...)
  }
  else {
    print("ERROR: Please input a valid data argument: forecastPower, productionPower, storageUsage")
    return(NA_real_)
    stop()
  }
  return(output)
}

data_tb <- energiAPI("productionPower",sortDes = "HourUTC", productionType = "all", num = 10000)
```

summary visuals

```{r}

##NEED TO update price area labels to desc

#one-way contingency
data_tb |>
  group_by(ProductionType) |>
  summarize(count = n())

#two-way contingency
data_tb |>
  group_by(ProductionType, PriceArea) |>
  summarize(count = n()) |>
  pivot_wider(names_from = PriceArea, values_from = count)

#center
data_tb |>
  group_by(ProductionType) |>
  summarize(mean_co2 = mean(CO2PerkWh), median_co2 = median(CO2PerkWh))
```

